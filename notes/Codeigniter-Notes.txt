application folder contains the heart of the application including MVC folders
config folder contains the config file.
	we can change the base url of our project in this file.
create a htaccess file which would bind request to our controllers when controller name is hit in the url
change base_url in config file and set it equal to out project path. Also, remove the index.php from index_page,
a custom controller is basically a class that extends the CI_Controller.
APPPATH is a constant provided by the codeigniter and contains the path to our application.
show_404() is a codeigniter function to show the 404 page.
to render a view use 
	$this->load->view('pageName', $data); where data is the array containing values to be sent to the view.
to call a method in a controller we usually hit 
	...controller/method/method_parameter
config folder has a routes.php file that takes care of the routing.
suppose I add a rule in there to map any request to pages controller
	$routes['(:any)'] = 'pages/view/$1'
	now, I can access the page using ..studentManagementSystem/about where the view function in the pages controller is called the about is passed as the argument to the view.
to access data sent via controller to the views, we use <?= title ?> in the html where title was sent as $data['title'];
base_url() gives the base url of the application and can be used while creating navlinks. To use this, enable base_url in the config/autoload file
to create a model we create a php file in the models folder and create a class that extends CI_Model
load database using $this->load->database();
to query the database, set 
	Make a query
	Fire the query
		$query = $this->db->get('posts') or
		return $query->result_array();

		$query = $this->db->get_where('posts', array('columnName' => 'value')); select * from posts where columnName = value
		return $query->row_array();
autoload.php contains the autoloader array that would load the files/libraries/helpers for us. The alternative way of doing this is to call $this->load->helper(array('url', 'form'));
to use the model in post controller, add model name in the autoloader. $autoloader['model'];
the routes file is sensitive to the position of the routes defined. the route first matched gets the control.
helpers can be loaded in two ways
	1.	$this->load->helper("url");
	2.	add url to the autoloader array in autoloader.php
there exists a form helper that would help us submit data.
to use form helper we add <?php echo form_open('url to send the data to') ?>. This automatically changes the form action.
to do form validation, use form_validation library that again has to be autoloaded. put validation_errors() just above the form_open(), not neccessarily above it.
To re-populate the form if error occurs, 
	use set_value for inputs <?php echo set_value('username') ?> pr <?php echo set_value('interests[]') ?>
	use set_select for select box <?php echo set_select(select-name, option-value)
	use set_checkbox for checkbox
in the controller, create validation rules for the fields using their names.
	$this->form_validation->set_rules('title', 'Title', 'required|min_length[10]'); 
We can make custom validation functions and apply them to the fields. To apply validation rule, 
	$this->form_validation->set_rules('title', 'Title', 'required|callback_test'); callback_ has to be prepended to specify custom validators. Now, the custom validator is defined as
		public function test($str){} that would return true or false on the bases of our test and set the error message to be shown on failing using $this->form_validation->set_message('test', 'your message')
We can trim values before inserting by adding trim to the rules
To show the errors individually for the individual fields use <?php echo form_error('username') ?>
to get values from the post array, 
	$this->input->post('title'); post since it is a post request.
redirecting can be achieved using redirect('url');
to insert into db, make an array of the values and do $this->db->insert('table_name', data_array);
to delete from db, 
	$this->db->where('id', $id);
	$this->db->delete('posts');